package com.bot.discord;

import com.bot.model.Personagem;
import com.bot.service.PersonagemService;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.events.message.react.MessageReactionAddEvent;

import java.util.Collections;
import java.util.Map;
import java.util.Optional;

/**
 * Classe utilit√°ria e sem estado (stateless) para tratar eventos de intera√ß√£o
 * que n√£o s√£o slash commands, como cliques em bot√µes e adi√ß√µes de rea√ß√£o.
 * <p>
 * O prop√≥sito desta classe √© remover a complexidade de lidar com intera√ß√µes
 * cont√≠nuas do {@link ComandosListener}, centralizando essa l√≥gica em um √∫nico local.
 */
public final class InteractionManager {

    /**
     * Construtor privado para prevenir a instancia√ß√£o da classe utilit√°ria.
     */
    private InteractionManager() {}

    /**
     * Processa todos os eventos de clique em bot√£o ({@link ButtonInteractionEvent}).
     * <p>
     * Atualmente utilizado para o fluxo de confirma√ß√£o do comando /deletar.
     * Inclui uma verifica√ß√£o de seguran√ßa para garantir que apenas o usu√°rio que
     * invocou o comando original possa clicar nos bot√µes correspondentes.
     *
     * @param event O objeto do evento de intera√ß√£o de bot√£o fornecido pela JDA.
     * @param service A inst√¢ncia do {@link PersonagemService} para executar a√ß√µes de neg√≥cio.
     */
    public static void handleButtonInteraction(ButtonInteractionEvent event, PersonagemService service) {
        String[] parts = event.getComponentId().split(":");
        String action = parts[0];
        String targetUserId = parts[1];

        // Medida de seguran√ßa crucial: Apenas o usu√°rio que iniciou o comando pode interagir.
        if (!event.getUser().getId().equals(targetUserId)) {
            event.reply("Voc√™ n√£o pode interagir com os bot√µes de outro usu√°rio.").setEphemeral(true).queue();
            return;
        }

        // Acknowledge da intera√ß√£o para evitar o erro "This interaction failed".
        event.deferEdit().queue();

        // Roteia a a√ß√£o com base no ID do bot√£o.
        switch (action) {
            case "delete-confirm":
                service.deletar(targetUserId);
                // Edita a mensagem original para dar feedback e remove os bot√µes.
                event.getHook().editOriginal("Personagem deletado com sucesso.")
                        .setComponents(Collections.emptyList()).queue();
                break;

            case "delete-cancel":
                event.getHook().editOriginal("A√ß√£o cancelada.")
                        .setComponents(Collections.emptyList()).queue();
                break;
        }
    }

    /**
     * Processa eventos de adi√ß√£o de rea√ß√£o ({@link MessageReactionAddEvent}).
     * <p>
     * Atualmente utilizado para a interface de distribui√ß√£o de pontos do comando /atributos.
     * O m√©todo verifica se a rea√ß√£o ocorreu em uma mensagem "rastreada", se o autor da
     * rea√ß√£o √© o dono daquela sess√£o e ent√£o aplica a l√≥gica de neg√≥cio correspondente.
     *
     * @param event O objeto do evento de adi√ß√£o de rea√ß√£o fornecido pela JDA.
     * @param service A inst√¢ncia do {@link PersonagemService} para executar a l√≥gica de neg√≥cio.
     * @param tracker O Mapa que rastreia as mensagens de atributos ativas (ID da Mensagem -> ID do Usu√°rio).
     */
    public static void handleReactionAdd(MessageReactionAddEvent event, PersonagemService service, Map<Long, String> tracker) {
        // Ignora rea√ß√µes do pr√≥prio bot para evitar loops.
        if (event.getUserId().equals(event.getJDA().getSelfUser().getId())) {
            return;
        }

        // Verifica se a rea√ß√£o foi em uma mensagem que estamos rastreando.
        String targetUserId = tracker.get(event.getMessageIdLong());

        // Medida de seguran√ßa: Verifica se a mensagem √© rastreada e se quem reagiu √© o "dono".
        if (targetUserId == null || !targetUserId.equals(event.getUserId())) {
            return;
        }

        // Remove a rea√ß√£o do usu√°rio para que ele possa clicar novamente (feedback instant√¢neo).
        event.getReaction().removeReaction(event.getUser()).queue();

        Optional<Personagem> personagemOpt = service.buscarPorUsuario(targetUserId);
        if (personagemOpt.isEmpty()) {
            tracker.remove(event.getMessageIdLong()); // Limpa o tracker se o personagem n√£o existe mais.
            return;
        }

        Personagem p = personagemOpt.get();
        if (p.getPontosDisponiveis() <= 0) {
            // Se n√£o h√° pontos, n√£o faz nada.
            return;
        }

        // Determina qual atributo modificar com base no emoji.
        String atributo = null;
        String emoji = event.getEmoji().getName();
        switch (emoji) {
            case "üí™" -> atributo = "corpo";
            case "üèÉ" -> atributo = "destreza";
            case "üß†" -> atributo = "mente";
            case "‚ú®" -> atributo = "vontade";
        }

        // Se for um emoji v√°lido e a regra de neg√≥cio permitir, atualiza o personagem.
        if (atributo != null && service.podeAumentarAtributo(p, atributo)) {
            p.setPontosDisponiveis(p.getPontosDisponiveis() - 1);
            switch (atributo) {
                case "corpo" -> p.setCorpo(p.getCorpo() + 1);
                case "destreza" -> p.setDestreza(p.getDestreza() + 1);
                case "mente" -> p.setMente(p.getMente() + 1);
                case "vontade" -> p.setVontade(p.getVontade() + 1);
            }
            service.salvar(p);

            // Atualiza a mensagem original com os novos valores usando o EmbedManager.
            event.getChannel().editMessageEmbedsById(event.getMessageId(), EmbedManager.buildAtributosEmbed(p)).queue();
        }
    }
}