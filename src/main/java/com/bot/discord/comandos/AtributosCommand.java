package com.bot.discord.comandos;

import com.bot.discord.EmbedManager;
import com.bot.model.Personagem;
import com.bot.service.PersonagemService;
import net.dv8tion.jda.api.entities.MessageEmbed;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.buttons.Button;

import java.util.Optional;

/**
 * Implementa a l√≥gica para o comando /atributos.
 * <p>
 * Este comando inicia uma interface interativa com bot√µes para que o usu√°rio possa gastar
 * seus pontos de atributo dispon√≠veis. Ele n√£o possui op√ß√µes e sua principal fun√ß√£o
 * √© enviar uma mensagem Embed especializada e anexar os bot√µes de intera√ß√£o.
 * <p>
 * A l√≥gica de resposta aos cliques nos bot√µes √© tratada pelo {@code InteractionManager}.
 */
public class AtributosCommand implements ICommand {

    /**
     * Retorna o nome do comando.
     *
     * @return O nome "atributos".
     */
    @Override
    public String getName() {
        return "atributos";
    }

    /**
     * Retorna a descri√ß√£o do comando.
     *
     * @return A descri√ß√£o "Gerencia os pontos de atributos do seu personagem.".
     */
    @Override
    public String getDescription() {
        return "Gerencia os pontos de atributos do seu personagem.";
    }

    /**
     * Executa a l√≥gica do comando /atributos.
     * <p>
     * O fluxo de execu√ß√£o √© o seguinte:
     * 1. Adia a resposta para evitar timeouts.
     * 2. Busca o personagem do usu√°rio. Se n√£o existir, envia uma mensagem de erro.
     * 3. Utiliza o {@link EmbedManager} para construir a interface visual de atributos.
     * 4. Cria os bot√µes para cada atributo, desabilitando-os se o personagem n√£o tiver pontos.
     * 5. Envia a mensagem embed com os bot√µes anexados.
     *
     * @param event   O objeto do evento de intera√ß√£o.
     * @param service A inst√¢ncia do servi√ßo de personagem para a l√≥gica de neg√≥cio.
     */
    @Override
    public void execute(SlashCommandInteractionEvent event, PersonagemService service) {
        event.deferReply().queue();

        String userId = event.getUser().getId();
        Optional<Personagem> personagemOpt = service.buscarPorUsuario(userId);

        if (personagemOpt.isEmpty()) {
            event.getHook().sendMessage("Voc√™ precisa ter um personagem para gerenciar atributos. Use `/criar`.")
                    .setEphemeral(true).queue();
            return;
        }

        Personagem personagem = personagemOpt.get();
        MessageEmbed embed = EmbedManager.buildAtributosEmbed(personagem);

        // Define se os bot√µes devem estar habilitados ou n√£o (apenas se houver pontos)
        boolean hasPoints = personagem.getPontosDisponiveis() > 0;

        // Cria os bot√µes com IDs customizados no formato "a√ß√£o:userId:alvo"
        Button corpoBtn = Button.secondary("attr-add:" + userId + ":corpo", "üí™ Corpo")
                .withDisabled(!hasPoints);
        Button destrezaBtn = Button.secondary("attr-add:" + userId + ":destreza", "üèÉ Destreza")
                .withDisabled(!hasPoints);
        Button menteBtn = Button.secondary("attr-add:" + userId + ":mente", "üß† Mente")
                .withDisabled(!hasPoints);
        Button vontadeBtn = Button.secondary("attr-add:" + userId + ":vontade", "‚ú® Vontade")
                .withDisabled(!hasPoints);

        // Envia a mensagem com o embed e uma "ActionRow" contendo os bot√µes
        event.getHook().sendMessageEmbeds(embed)
                .addComponents(ActionRow.of(corpoBtn, destrezaBtn, menteBtn, vontadeBtn))
                .queue();
    }
}